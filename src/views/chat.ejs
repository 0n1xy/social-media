<!-- <!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Chat</title>
    <style>
      /* Chat styling */
      #chat-box {
        width: 100%;
        height: 400px;
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow-y: scroll;
        padding: 15px;
        background-color: #f0f0f0;
        display: flex;
        flex-direction: column;
      }
      .message {
        margin: 8px 0;
        padding: 8px 12px;
        border-radius: 18px;
        max-width: 60%;
        font-size: 14px;
        line-height: 1.4;
      }
      .sender-message {
        align-self: flex-end;
        background-color: #0084ff;
        color: #fff;
        border-radius: 18px 18px 0 18px;
      }
      .receiver-message {
        align-self: flex-start;
        background-color: #e4e6eb;
        color: #000;
        border-radius: 18px 18px 18px 0;
      }
      .username {
        font-weight: bold;
        font-size: 12px;
        color: #606770;
        margin-bottom: 2px;
      }
      .timestamp {
        font-size: 10px;
        color: #a0a0a0;
        margin-top: 4px;
        text-align: right;
      }
    </style>
  </head>
  <body>
    <h1>Chat Interface</h1>
    <div id="chat-box"></div>
    <input type="text" id="messageInput" placeholder="Type your message" />
    <button onclick="sendMessage()">Send Message</button>

    <script>
      let senderUserId = prompt(
        "Please enter your user ID:",
        "6721167caa20f8a92a6b91a9"
      );
      let receiveUserId = prompt(
        "Please enter the receiver's user ID:",
        "6721167caa20f8a92a6b91af"
      );

      if (!senderUserId || !receiveUserId) {
        alert("Both sender and receiver IDs are required.");
        throw new Error("Both sender and receiver IDs are required.");
      }

      const chatBox = document.getElementById("chat-box");

      async function loadMessages() {
        try {
          const response = await fetch(
            `/messages?userId1=${senderUserId}&userId2=${receiveUserId}`
          );
          const messages = await response.json();
          chatBox.innerHTML = ""; // Clear the chat box before loading messages
          messages.reverse().forEach((message) => displayMessage(message));
          scrollToBottom();
        } catch (error) {
          console.error("Error loading messages:", error);
        }
      }

      async function sendMessage() {
        const messageInput = document.getElementById("messageInput");
        const message = messageInput.value;

        if (!message) {
          alert("Message cannot be empty");
          return;
        }

        const messageData = {
          senderUserId,
          receiveUserId,
          message,
        };

        try {
          // Send message via API call
          const response = await fetch("http://localhost:3000/messages", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(messageData),
          });

          const data = await response.json();

          if (response.status === 201) {
            console.log("Message sent successfully:", data);

            // Display the new message in the chat box immediately
            displayMessage(data.data); // Use the data from the API response
          } else {
            console.error("Error sending message:", data.message);
            alert("Failed to send message: " + data.message);
          }
        } catch (error) {
          console.error("Error sending message:", error);
          alert("An error occurred while sending the message.");
        }

        // Clear input field
        messageInput.value = "";
      }

      function displayMessage(message) {
        const messageElement = document.createElement("div");
        messageElement.classList.add("message");

        if (message.senderUserId === senderUserId) {
          messageElement.classList.add("sender-message");
          messageElement.innerHTML = `
            <span class="username">You</span>
            <div>${message.message}</div>
            <div class="timestamp">${new Date(
              message.timestamp
            ).toLocaleTimeString()}</div>`;
        } else {
          messageElement.classList.add("receiver-message");
          messageElement.innerHTML = `
            <span class="username">Friend</span>
            <div>${message.message}</div>
            <div class="timestamp">${new Date(
              message.timestamp
            ).toLocaleTimeString()}</div>`;
        }

        chatBox.appendChild(messageElement);
        scrollToBottom();
      }

      function scrollToBottom() {
        chatBox.scrollTop = chatBox.scrollHeight;
      }

      // Polling function to fetch new messages every 5 seconds
      setInterval(loadMessages, 5000);

      // Load initial messages on page load
      loadMessages();
    </script>
  </body>
</html> -->

<!-- <!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Chat</title>
    <style>
      /* Chat styling */
      #chat-box {
        width: 100%;
        height: 400px;
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow-y: scroll;
        padding: 15px;
        background-color: #f0f0f0;
        display: flex;
        flex-direction: column;
      }
      .message {
        margin: 8px 0;
        padding: 8px 12px;
        border-radius: 18px;
        max-width: 60%;
        font-size: 14px;
        line-height: 1.4;
      }
      .sender-message {
        align-self: flex-end;
        background-color: #0084ff;
        color: #fff;
        border-radius: 18px 18px 0 18px;
      }
      .receiver-message {
        align-self: flex-start;
        background-color: #e4e6eb;
        color: #000;
        border-radius: 18px 18px 18px 0;
      }
      .username {
        font-weight: bold;
        font-size: 12px;
        color: #606770;
        margin-bottom: 2px;
      }
      .timestamp {
        font-size: 10px;
        color: #a0a0a0;
        margin-top: 4px;
        text-align: right;
      }
    </style>
  </head>
  <body>
    <h1>Chat Interface</h1>
    <div id="chat-box"></div>
    <input type="file" id="fileInput" accept="image/*,video/*" />
    <input type="text" id="messageInput" placeholder="Type your message" />
    <button onclick="sendMessage()">Send Message</button>

    <script>
      let senderUserId = prompt(
        "Please enter your user ID:",
        "6721167caa20f8a92a6b91a9"
      );
      let receiveUserId = prompt(
        "Please enter the receiver's user ID:",
        "6721167caa20f8a92a6b91af"
      );

      if (!senderUserId || !receiveUserId) {
        alert("Both sender and receiver IDs are required.");
        throw new Error("Both sender and receiver IDs are required.");
      }

      const chatBox = document.getElementById("chat-box");

      async function loadMessages() {
        try {
          const response = await fetch(
            `/messages?userId1=${senderUserId}&userId2=${receiveUserId}`
          );
          const messages = await response.json();
          chatBox.innerHTML = ""; // Clear the chat box before loading messages
          messages.reverse().forEach((message) => displayMessage(message));
          scrollToBottom();
        } catch (error) {
          console.error("Error loading messages:", error);
        }
      }

      async function sendMessage() {
        const messageInput = document.getElementById("messageInput");
        const fileInput = document.getElementById("fileInput");
        const message = messageInput.value;

        let base64File = null;
        if (fileInput.files.length > 0) {
          const file = fileInput.files[0];
          base64File = await toBase64(file); // Convert file to base64
        }

        const formData = new URLSearchParams();
        formData.append("senderUserId", senderUserId);
        formData.append("receiveUserId", receiveUserId);
        formData.append("message", message);
        if (base64File) {
          formData.append("media", base64File);
          console.log(base64File);
        }

        try {
          // Send message via API call using x-www-form-urlencoded
          const response = await fetch("http://localhost:3000/messages", {
            method: "POST",
            headers: {
              "Content-Type": "application/x-www-form-urlencoded",
            },
            body: formData.toString(),
          });

          const data = await response.json();

          if (response.status === 201) {
            displayMessage(data.data);
          } else {
            console.error("Error sending message:", data.message);
          }
        } catch (error) {
          console.error("Error sending message:", error);
        }

        // Clear input fields
        messageInput.value = "";
        fileInput.value = "";
      }

      function toBase64(file) {
        return new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.readAsDataURL(file);
          reader.onload = () => resolve(reader.result);
          reader.onerror = (error) => reject(error);
        });
      }

      function displayMessage(message) {
        const messageElement = document.createElement("div");
        messageElement.classList.add("message");

        if (message.senderUserId === senderUserId) {
          messageElement.classList.add("sender-message");
        } else {
          messageElement.classList.add("receiver-message");
        }

        messageElement.innerHTML = `
          <span class="username">${
            message.senderUserId === senderUserId ? "You" : "Friend"
          }</span>
          <div>${message.message}</div>
          ${
            message.mediaUrl
              ? `<img src="${message.mediaUrl}" alt="media" style="max-width: 100%;">`
              : ""
          }
          <div class="timestamp">${new Date(
            message.timestamp
          ).toLocaleTimeString()}</div>
        `;
        chatBox.appendChild(messageElement);
        scrollToBottom();
      }

      function scrollToBottom() {
        chatBox.scrollTop = chatBox.scrollHeight;
      }

      // Polling function to fetch new messages every 5 seconds
      setInterval(loadMessages, 5000);

      // Load initial messages on page load
      loadMessages();
    </script>
  </body>
</html> -->

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Chat</title>
    <style>
      /* Chat styling */
      #chat-box {
        width: 100%;
        height: 400px;
        border: 1px solid #ddd;
        border-radius: 8px;
        overflow-y: scroll;
        padding: 15px;
        background-color: #f0f0f0;
        display: flex;
        flex-direction: column;
      }
      .message {
        margin: 8px 0;
        padding: 8px 12px;
        border-radius: 18px;
        max-width: 60%;
        font-size: 14px;
        line-height: 1.4;
      }
      .sender-message {
        align-self: flex-end;
        background-color: #0084ff;
        color: #fff;
        border-radius: 18px 18px 0 18px;
      }
      .receiver-message {
        align-self: flex-start;
        background-color: #e4e6eb;
        color: #000;
        border-radius: 18px 18px 18px 0;
      }
      .username {
        font-weight: bold;
        font-size: 12px;
        color: #606770;
        margin-bottom: 2px;
      }
      .timestamp {
        font-size: 10px;
        color: #a0a0a0;
        margin-top: 4px;
        text-align: right;
      }
      .media {
        margin-top: 8px;
        max-width: 100%;
        border-radius: 8px;
      }
    </style>
  </head>
  <body>
    <h1>Chat Interface</h1>
    <div id="chat-box"></div>
    <input type="file" id="fileInput" accept="image/*,video/*" />
    <input type="text" id="messageInput" placeholder="Type your message" />
    <button onclick="sendMessage()">Send Message</button>

    <script>
      let senderUserId = prompt(
        "Please enter your user ID:",
        "6721167caa20f8a92a6b91a9"
      );
      let receiveUserId = prompt(
        "Please enter the receiver's user ID:",
        "6721167caa20f8a92a6b91af"
      );

      if (!senderUserId || !receiveUserId) {
        alert("Both sender and receiver IDs are required.");
        throw new Error("Both sender and receiver IDs are required.");
      }

      const chatBox = document.getElementById("chat-box");

      async function loadMessages() {
        try {
          const response = await fetch(
            `/messages?userId1=${senderUserId}&userId2=${receiveUserId}`
          );
          const messages = await response.json();
          chatBox.innerHTML = ""; // Clear the chat box before loading messages
          messages.reverse().forEach((message) => displayMessage(message));
          scrollToBottom();
        } catch (error) {
          console.error("Error loading messages:", error);
        }
      }

      async function sendMessage() {
        const messageInput = document.getElementById("messageInput");
        const fileInput = document.getElementById("fileInput");
        const message = messageInput.value;

        let base64File = null;
        if (fileInput.files.length > 0) {
          const file = fileInput.files[0];
          base64File = await toBase64(file); // Convert file to base64
        }

        const messageData = {
          senderUserId,
          receiveUserId,
          message,
          media: base64File ? [base64File] : [], // Send as array if media exists
        };

        try {
          // Send message via API call using x-www-form-urlencoded
          const response = await fetch("http://localhost:3000/messages", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(messageData),
          });

          const data = await response.json();

          if (response.status === 201) {
            displayMessage(data.data);
          } else {
            console.error("Error sending message:", data.message);
          }
        } catch (error) {
          console.error("Error sending message:", error);
        }

        // Clear input fields
        messageInput.value = "";
        fileInput.value = "";
      }

      function toBase64(file) {
        return new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.readAsDataURL(file);
          reader.onload = () => resolve(reader.result);
          reader.onerror = (error) => reject(error);
        });
      }

      function displayMessage(message) {
        const messageElement = document.createElement("div");
        messageElement.classList.add("message");

        if (message.senderUserId === senderUserId) {
          messageElement.classList.add("sender-message");
        } else {
          messageElement.classList.add("receiver-message");
        }

        messageElement.innerHTML = `
          <span class="username">${
            message.senderUserId === senderUserId ? "You" : "Friend"
          }</span>
          <div>${message.message}</div>
          ${
            message.media && message.media.length > 0
              ? message.media
                  .map((url) => `<img src="${url}" alt="media" class="media">`)
                  .join("")
              : ""
          }
          <div class="timestamp">${new Date(
            message.timestamp
          ).toLocaleTimeString()}</div>
        `;
        chatBox.appendChild(messageElement);
        scrollToBottom();
      }

      function scrollToBottom() {
        chatBox.scrollTop = chatBox.scrollHeight;
      }

      // Polling function to fetch new messages every 5 seconds
      setInterval(loadMessages, 5000);

      // Load initial messages on page load
      loadMessages();
    </script>
  </body>
</html>
